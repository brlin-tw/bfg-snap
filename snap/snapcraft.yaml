%YAML 1.1
---
# Snapcraft Recipe for BFG Repo-Cleaner
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: bfg-repo-cleaner
title: BFG Repo-Cleaner (UNOFFICIAL)
summary: Removes large or troublesome blobs like git-filter-branch does, but faster
description: |
  The BFG is a simpler, faster alternative to [`git-filter-branch`][1] for cleansing bad data out of your Git repository history:

  * Removing **Crazy Big Files**
  * Removing **Passwords**, **Credentials** & other **Private data**

  The `git-filter-branch` command is enormously powerful and can do things that the BFG can't - but the BFG is _much_ better for the tasks above, because:

  * [Faster][2] : **10 - 720x** faster
  * [Simpler][3] : The BFG isn't particularily clever, but _is_ focused on making the above tasks easy
  * Beautiful : If you need to, you can use the beautiful Scala language to customise the BFG. Which has got to be better than Bash scripting at least some of the time.

  [1]: http://git-scm.com/docs/git-filter-branch
  [2]: https://rtyley.github.io/bfg-repo-cleaner/#speed
  [3]: https://rtyley.github.io/bfg-repo-cleaner/#examples

  **Snap-specific notes**

  You can adjust JVM max heap size limit via the following command:

      sudo snap set bfg-repo-cleaner jvm.xmx=2048m

  No other JVM parameters are supported as of now.

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/bfg.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: GPL-3.0

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# Extract metadata from the main snap part
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: main

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
  - command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
base: core
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: devel

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
      - -bin/README.*

  # Check out the tagged release revision if it isn't promoted to the stable channel
  # https://forum.snapcraft.io/t/selective-checkout-check-out-the-tagged-release-revision-if-it-isnt-promoted-to-the-stable-channel/10617
  selective-checkout:
    plugin: nil
    build-packages:
      - git
    stage-snaps:
      - selective-checkout
    prime:
      - -*

  homeishome-launch:
    plugin: nil
    stage-snaps:
      - homeishome-launch

  main:
    after:
      - selective-checkout

    build-packages:
      - default-jdk-headless
      # apt-key dependency
      - dirmngr
      - wget
      # Required by sbt archive
      - apt-transport-https

    source: https://github.com/rtyley/bfg-repo-cleaner.git
    source-depth: 200
    override-pull: |
      set -o nounset

      echo "deb https://dl.bintray.com/sbt/debian /" | tee -a /etc/apt/sources.list.d/sbt.list
      # Workaround not runnable in LP build
      #apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 642AC823
      wget \
        -qO \
        - \
        'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x2ee0ea64e40a89b84b2df73499e82a75642ac823' \
        | apt-key add -

      apt-get update
      apt-get install -y sbt

      snapcraftctl pull

      "${SNAPCRAFT_STAGE}"/scriptlets/selective-checkout \
        --stable-tag-pattern='^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$'

    plugin: nil

    override-build: |
      sbt compile
      sbt bfg/assembly
      jarfile="$(
        find \
          bfg/target \
          -name '*.jar' \
          | head \
            --lines=1
      )"
      install \
        --mode=0644 \
        "${jarfile}" \
        "${SNAPCRAFT_PART_INSTALL}/sbt.jar"

    stage-packages:
      - default-jre-headless

    filesets:
      executables:
        - bin/bfg-launch
        - usr/lib/jvm/default-java
        - usr/lib/jvm/java-*/bin/java
        - usr/lib/jvm/java-*/jre/bin/java

      shared_libraries:
        - lib/**.so*
        - usr/lib/**.so*

    # prime:
    #   - $executables
    #   - $shared_libraries

    override-prime: |
      set -o nounset

      snapcraftctl prime

      ln \
        --symbolic \
        --force \
        ../usr/lib/jvm/default-java/bin/java \
        bin/java

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  bfg-repo-cleaner:
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bfg-launch

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
      - bin/homeishome-launch

    environment:
      # Hardcode locale available in snap runtime
      LANG: C.UTF-8
      LC_ALL: C.UTF-8

    plugs:
      - home
      - removable-media
