%YAML 1.1
---
# Snapcraft Recipe for BFG Repo-Cleaner
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: bfg-repo-cleaner
title: BFG Repo-Cleaner (UNOFFICIAL)
summary: Removes large or troublesome blobs like git-filter-branch does, but faster
description: |
  The BFG is a simpler, faster alternative to [`git-filter-branch`][1] for cleansing bad data out of your Git repository history:

  * Removing **Crazy Big Files**
  * Removing **Passwords**, **Credentials** & other **Private data**

  The `git-filter-branch` command is enormously powerful and can do things that the BFG can't - but the BFG is _much_ better for the tasks above, because:

  * [Faster][2] : **10 - 720x** faster
  * [Simpler][3] : The BFG isn't particularily clever, but _is_ focused on making the above tasks easy
  * Beautiful : If you need to, you can use the beautiful Scala language to customise the BFG. Which has got to be better than Bash scripting at least some of the time.

  [1]: http://git-scm.com/docs/git-filter-branch
  [2]: https://rtyley.github.io/bfg-repo-cleaner/#speed
  [3]: https://rtyley.github.io/bfg-repo-cleaner/#examples

  **Snap-specific notes**

  You can adjust JVM max heap size limit via the following command:

      sudo snap set bfg-repo-cleaner jvm.xmx=2048m

  No other JVM parameters are supported as of now.

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
icon: snap/gui/bfg.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: GPL-3.0

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# Extract metadata from the main snap part
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: main

# Snapd feature set and version the snap requires in order to work
# https://forum.snapcraft.io/t/snapcraft-top-level-metadata/8334#heading--assumes
assumes:
  - command-chain

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
base: core22
# https://docs.snapcraft.io/snapcraft-top-level-metadata/8334#heading--base

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: stable

contact: https://github.com/brlin-tw/bfg-snap/issues
website: https://github.com/brlin-tw/bfg-snap

# Snapcraft package repositories
# https://snapcraft.io/docs/package-repositories
package-repositories:
  - type: apt
    components: [main]
    suites: [all]
    key-id: 2EE0EA64E40A89B84B2DF73499E82A75642AC823
    url: https://repo.scala-sbt.org/scalasbt/debian

  - type: apt
    path: /
    key-id: 2EE0EA64E40A89B84B2DF73499E82A75642AC823
    url: https://repo.scala-sbt.org/scalasbt/debian

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
      - -bin/README.*

  homeishome-launch:
    plugin: nil
    stage-snaps:
      - homeishome-launch

  main:
    build-packages:
      - default-jdk-headless
      - sbt

      # selective-checkout dependencies
      - curl
      - git
      - jq
      - sed

    source: https://github.com/rtyley/bfg-repo-cleaner.git
    source-depth: 200
    override-pull: "${CRAFT_PROJECT_DIR}/snap/local/scriptlets/pull.sh"
    plugin: nil
    override-build: "${CRAFT_PROJECT_DIR}/snap/local/scriptlets/build.sh"

    stage-packages:
      - default-jre-headless

    override-prime: "${CRAFT_PROJECT_DIR}/snap/local/scriptlets/prime.sh"
    prime:
      - -usr/lib/jvm/java-*-openjdk-*/bin/jjs
      - -usr/lib/jvm/java-*-openjdk-*/bin/keytool
      - -usr/lib/jvm/java-*-openjdk-*/bin/pack200
      - -usr/lib/jvm/java-*-openjdk-*/bin/rmid
      - -usr/lib/jvm/java-*-openjdk-*/bin/rmiregistry
      - -usr/lib/jvm/java-*-openjdk-*/bin/unpack200
      - -usr/lib/jvm/java-*-openjdk-*/lib/libjavajpeg.so
      - -usr/lib/jvm/java-*-openjdk-*/lib/libfontmanager.so
      - -usr/lib/jvm/java-*-openjdk-*/lib/libmlib_image.so
      - -usr/lib/jvm/java-*-openjdk-*/man
      - -usr/lib/*-linux-gnu/libasound.so*
      - -usr/lib/*-linux-gnu/libavahi-client.so*
      - -usr/lib/*-linux-gnu/libavahi-common.so*
      - -usr/lib/*-linux-gnu/libcups.so*
      - -usr/lib/*-linux-gnu/libfontconfig.so*
      - -usr/lib/*-linux-gnu/libgraphite*.so*
      - -usr/lib/*-linux-gnu/libharfbuzz.so*
      - -usr/lib/*-linux-gnu/libjpeg.so*
      - -usr/lib/*-linux-gnu/liblcms*.so*
      - -usr/lib/*-linux-gnu/libnss*.so*
      - -usr/lib/*-linux-gnu/libnspr*.so*
      - -usr/lib/*-linux-gnu/libplc*.so*
      - -usr/lib/*-linux-gnu/libplds*.so
      - -usr/lib/*-linux-gnu/libsmime*.so*
      - -usr/lib/*-linux-gnu/libssl*.so*
      - -usr/lib/*-linux-gnu/nss/*.so*
      - -usr/sbin/update-java-alternatives

lint:
  ignore:
    - library:
      # Not feasible to prime at the moment
      - usr/lib/jvm/java-*-openjdk-*/lib/lib*.so*

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  bfg-repo-cleaner:
    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bin/bfg-launch

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
      - bin/homeishome-launch

    environment:
      # Hardcode locale available in snap runtime
      LANG: C.UTF-8
      LC_ALL: C.UTF-8

    plugs:
      - home
      - removable-media
